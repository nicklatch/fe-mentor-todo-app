// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todos.sql

package database

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (task, completed)
VALUES ($1, $2)
RETURNING id, task, completed, created_at, updated_at
`

type CreateTodoParams struct {
	Task      string `json:"task"`
	Completed bool   `json:"completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.Task, arg.Completed)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompletedTodos = `-- name: DeleteCompletedTodos :exec
DELETE
FROM todos
WHERE completed = true
`

func (q *Queries) DeleteCompletedTodos(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteCompletedTodos)
	return err
}

const deleteOneTodo = `-- name: DeleteOneTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteOneTodo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOneTodo, id)
	return err
}

const getAllActiveTodos = `-- name: GetAllActiveTodos :many
SELECT id, task, completed, created_at, updated_at
FROM todos
WHERE completed = false
ORDER BY id
`

func (q *Queries) GetAllActiveTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getAllActiveTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCompletedTodos = `-- name: GetAllCompletedTodos :many
SELECT id, task, completed, created_at, updated_at
FROM todos
WHERE completed = true
ORDER BY id
`

func (q *Queries) GetAllCompletedTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getAllCompletedTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, task, completed, created_at, updated_at
FROM todos
ORDER BY id
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleCompleted = `-- name: ToggleCompleted :exec
UPDATE todos
SET completed = NOT completed, updated_at = now()
WHERE id = $1
`

func (q *Queries) ToggleCompleted(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, toggleCompleted, id)
	return err
}
